{"version":3,"sources":["main.scss"],"names":[],"mappings":"AAWA,6BACI,WACA,UACA,YAbW,CAcd,KAIG,uBAfa,CAgBhB,KAIG,oBAnBU,CAoBb,KAGG,qBAtBW,CAuBd,KAGG,qBAzBW,CA0Bd,KAGG,uBA5Ba,CA6BhB,KASC,oBAHmB,CAIpB,MAGG,qBAPsB,CAQzB,MAWC,YACA,UANY,CAOb,MAYa,SAHA,CAGZ,MAAY,UAHK,CAGjB,MAAY,YAHY,CAGxB,MAAY,UAHmB,CAG/B,MAAY,WAHyB,CAGE,IASrC,SAJU,CAGZ,IACE,UAJe,CAGjB,IACE,YAJsB,CAGxB,IACE,UAJ6B,CAG/B,IACE,WAJmC,CAMpC,IAUC,SAJO,CAGT,IACE,UAJc,CAGhB,IACE,UAJmB,CAKpB,IAsBC,SAjBU,CAgBZ,IACE,UAhBW,CAeb,IACE,UAfW,CAcb,IACE,UAdgB,CAejB,IAQC,SA1BU,CAyBZ,IACE,UAzBW,CAwBb,IACE,UAxBW,CAuBb,IACE,UAvBgB,CAwBjB,OAQD,qBACA,kBACA,iBACA,SACA,gBACA,uCACA,mBAAmB,CAEnB,aACE,gBACA,gDAE8B,CAC/B,sBAbD,qBACA,kBACA,iBACA,SACA,kBACA,2CACA,mBAAmB,CAEnB,4BACE,mBACA,sDAE8B,CAC/B","file":"main.css","sourcesContent":["\n$height : 100px;\n$width : 20%;\n$superMap : (\n    col1 : orange,\n    col2 : red,\n    col3 : blue,\n    col4 : gray,\n    col5 : yellow\n    );\n\n.el {\n    float: left;\n    width: $width;\n    height: $height;\n}\n\n.el1 {\n    @extend .el;\n    background-color: map-get($superMap,col1)  \n}\n\n.el2 {\n    @extend .el;\n    background-color: map-get($superMap,col2)  \n}\n.el3 {\n    @extend .el;\n    background-color: map-get($superMap,col3)  \n}\n.el4 {\n    @extend .el;\n    background-color: map-get($superMap,col4)  \n}\n.el5 {\n    @extend .el;\n    background-color: map-get($superMap,col5)  \n}\n\n// ************** Przykładowy scss (był pisany na sassmeister\n\n// lista pięciu kolorów\n\n$superColorList : red blue yellow;\n\n.div {\n  background-color: nth($superColorList, 1);\n}\n\n.div2 {\n    background-color: nth($superColorList, 2);\n}\n\n//mapa\n\n$coloroma : (\n  mainColor : orange,\n  mainW : 30px,\n  mainH : 50px\n);\n\n.divM {\n  height: map-get($coloroma, mainH);\n  width: map-get($coloroma, mainW); ;\n}\n\n// ********** To było robione na SassMeister\n\n//stwórz listę 5ciu kolorów\n//zrób pętlę for od 1 do długości listy\n//wygeneruj klasy o nazwach .el-1, .el-2, etc\n//każda klasa powinna mieć color: tutaj pobrany kolor\n\n$colList : red blue orange yellow green;\n\n@for $i from 1 through length($colList) {\n  .el-#{$i} { color: nth($colList, $i) }\n}\n\n// ************** kolejny z SM\n\n$colList : red blue orange yellow green;\n\n@each $col in $colList {\n  div {\n    color: $col;\n    \n  }\n  \n}\n\n// ************** kolejny z SM\n\n$lista: red yellow blue;\n\n@each $col in $lista {\n  div {\n    color: $col;\n  }\n}\n\n//MAPA\n$mapa : (\n  kolor1 : red,\n  kolor2 : blue,\n  kolor3 : cyan,\n  kolorWazny : black\n);\n\n\n//tutaj za pomoca FOR - ale w sumie nie ma sensu\n//bo klucze musza byc wtedy takie same (kolor1, kolor2...)\n// @for $i from 1 through length($mapa) {\n//   div {\n//     color : map-get($mapa, kolor#{$i});\n//   } \n// }\n\n@each $key, $color in $mapa {\n  div {\n    color: $color;\n  }\n}\n\n\n//3 sposob z rzutowaniem wartosci mapy na liste\n$lisa : map-values($mapa);\n@for $i from 1 through length($lisa) {\n  div {\n    color: nth($lisa, $i)\n  }\n}\n\n\n// Super!!!\n\n//btn\n@mixin btn($color: red) {\n  display:inline-block;\n  padding:30px 50px;\n  font-weight:bold;\n  border:0;\n  background:$color;\n  box-shadow:inset 0 0 0 $color, 0 0 0 $color;\n  transition:0.5s all;\n  \n  &:hover {\n    background: darken($color, 10%);\n    box-shadow:\n    inset 0 -1px 0 0 lighten($color, 30%),\n    0 10px 0 0 darken($color, 30%);\n  }\n}\n\n\nbutton {\n  @include btn(blue);\n}\nbutton:nth-of-type(2) {\n  @include btn(orange);\n}\n"]}